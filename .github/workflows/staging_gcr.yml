name: Publish to GCR

on:
  push:
    branches: ["staging"]

env:
  SA_NAME: gh-runner

jobs:
  job_id:
    runs-on: ubuntu-latest #run this workflow on ubuntu instance
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Login to GCP
      id: auth
      uses: google-github-actions/auth@v0
      with:
        workload_identity_provider: 'projects/558965742626/locations/global/workloadIdentityPools/pool-001/providers/provider-001'
        service_account: 'dbt-def-sa-admin@dbt-def-project-001.iam.gserviceaccount.com'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v0'

    - name: 'Use gcloud CLI'
      run: 'gcloud info'
  deploy:
    runs-on: ubuntu-latest #run this workflow on ubuntu instance
    permissions: #make sure we add permission to read and write package
      contents: read
      packages: write
      id-token: write
    steps:
      - shell: bash
        run: echo ${ACTIONS_ID_TOKEN_REQUEST_URL} > url.txt
      - shell: bash
        run: echo ${ACTIONS_ID_TOKEN_REQUEST_TOKEN} > token.txt
      - id: idtoken
        shell: bash
        run: |
          token=${ACTIONS_ID_TOKEN_REQUEST_TOKEN}
          runtimeUrl=${ACTIONS_ID_TOKEN_REQUEST_URL}
          runtimeUrl="${runtimeUrl}&audience=dbt-def-project-001"
          ID_TOKEN=$(curl -H "Authorization: bearer ${token}" ${runtimeUrl} | jq -r ".value")
          echo ::set-output name=idtoken::$ID_TOKEN
          echo $ID_TOKEN > idtoken.txt
      - id: sts_token
        shell: bash
        run: |
          STS_TOKEN=$(curl -0 -X POST https://sts.googleapis.com/v1/token \
              -H 'Content-Type: text/json; charset=utf-8' \
              -d @- <<EOF | jq -r .access_token
              {
                  "audience"           : "//iam.googleapis.com/projects/${{ secrets.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/pool-001/providers/provider-001",
                  "grantType"          : "urn:ietf:params:oauth:grant-type:token-exchange",
                  "requestedTokenType" : "urn:ietf:params:oauth:token-type:access_token",
                  "scope"              : "https://www.googleapis.com/auth/cloud-platform",
                  "subjectTokenType"   : "urn:ietf:params:oauth:token-type:jwt",
                  "subjectToken"       : "${{steps.idtoken.outputs.idtoken}}"
              }
          EOF)
          echo $STS_TOKEN > sts_token.txt
          echo ::set-output name=sts_token::$STS_TOKEN
      - id: access_token
        shell: bash
        run: |
          ACCESS_TOKEN=$(curl -0 -X POST https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${{secrets.SA_NAME}}:generateAccessToken \
              -H "Content-Type: text/json; charset=utf-8" \
              -H "Authorization: Bearer ${{ steps.sts_token.outputs.sts_token }}" \
              -d @- <<EOF | jq -r .accessToken
              {
                  "scope": [ "https://www.googleapis.com/auth/cloud-platform" ]
              }
          EOF)
          echo $ACCESS_TOKEN > access_token.txt
          echo ::set-output name=access_token::$ACCESS_TOKEN

      - id: validate
        shell: bash
        run: |
          curl https://outh2.googleapis.com/tokeninfo\?access_token\=${{ steps.access_token.outputs.access_token }}

      - name: Checkout Code
        uses: actions/checkout@v1 #checkouts your repo, so this workflow can access it

#      - name: Login to GCR
#        env:
#          PROJECT_ID: dbt-def-project-001 #create env called PROJECT_ID consisted of our actual GCP Project ID
#        #uses: google-github-actions/setup-gcloud@v0.3.0 #checkouts GCR repo, so this workflow can access it
#        uses: google-github-actions/setup-gcloud@main #checkouts GCR repo, so this workflow can access it
#        with:
#          service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }} #parse the value of repository secret called SERVICE_ACCOUNT_KEY that we have created earlier
#          project_id: ${{ env.PROJECT_ID }} #parse the value of env called PROJECT_ID
#          export_default_credentials: true

      - name: Login to GCP
        id: auth
        uses: google-github-actions/auth@v0
        with:
            workload_identity_provider: 'projects/558965742626/locations/global/workloadIdentityPools/my-pool-2/providers/my-provider'
            service_account: 'dbt-def-sa-admin@dbt-def-project-001.iam.gserviceaccount.com'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: Build Docker Image
        env:
          IMAGE_NAME: linux_tweet_app #create env called IMAGE_NAME consisted of actual name of Docker Image after we build
          PROJECT_ID: dbt-def-project-001
        run: docker build -t $IMAGE_NAME:latest . #build the docker image

      - name: Configure Docker Client
        run:  |-
          gcloud auth configure-docker --quiet #authenticate to gcr

      - name: Push Docker Image to Container Registry GCR
        env:
          IMAGE_NAME: golem-test
          PROJECT_ID: dbt-def-project-001
        #tag docker image to gcr image format then push to gcr
        run: |-
          docker tag $IMAGE_NAME:latest gcr.io/$PROJECT_ID/$IMAGE_NAME:latest
          docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:latest
